# -*- coding: utf-8 -*-
"""CNN Classification Of Cats & Dogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10BendHMGveR8-iJH86fgXH-IEcKEjYcG
"""

import os
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
# %matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras

train_dir=os.path.join('/','content','drive','MyDrive','CNN_CATS','train')
valid_dir=os.path.join('/','content','drive','MyDrive','CNN_CATS','validation')
test_dir=os.path.join('/','content','drive','MyDrive','CNN_CATS','test')

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen=ImageDataGenerator(rescale=1./255)
test_datagen=ImageDataGenerator(rescale=1./255)

train_gene=train_datagen.flow_from_directory(
    train_dir,
    target_size=(150,150),
    batch_size=20,
    class_mode='binary')

valid_gene=test_datagen.flow_from_directory(
    valid_dir,
    target_size=(150,150),
    batch_size=20,
    class_mode='binary')

from tensorflow.keras import layers
from tensorflow.keras import models

model=models.Sequential()

model.add(layers.Conv2D(32,
                         (3,3),
                         activation='relu',
                         input_shape=(150,150,3)))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D(64,
                         (3,3),
                         activation='relu'))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D(128,
                         (3,3),
                         activation='relu'))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D(128,
                         (3,3),
                         activation='relu'))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Flatten())

model.add(layers.Dense(512,activation='relu'))

model.add(layers.Dense(1,activation='sigmoid'))

model.summary()

from tensorflow.keras import optimizers

model.compile(loss='binary_crossentropy',
              optimizer=optimizers.RMSprop(lr=1e-4),
              metrics=['acc'])

history=model.fit_generator(
    train_gene,
    steps_per_epoch=100,
    epochs=20,
    validation_data=valid_gene,
    validation_steps=50)

pd.DataFrame(history.history).plot(figsize=(8,5))
plt.grid(True)
plt.gca().set_ylim(0,1)
plt.show()

model.save('model.h5',os.path.join('/','content','drive','MyDrive','CNN_CATS'))

from tensorflow.keras import backend as K

K.clear_session()
del model

train_datagen=ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,)

test_datagen=ImageDataGenerator(rescale=1./255)

train_gene=train_datagen.flow_from_directory(
    train_dir,
    target_size=(150,150),
    batch_size=32,
    class_mode='binary')

valid_gene=test_datagen.flow_from_directory(
    valid_dir,
    target_size=(150,150),
    batch_size=32,
    class_mode='binary')

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu',
                        input_shape=(150, 150, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dropout(0.5))
model.add(layers.Dense(512, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer=optimizers.RMSprop(lr=1e-4),
              metrics=['acc'])

history=model.fit_generator(
    train_gene,
    steps_per_epoch=20,
    epochs=100,
    validation_data=valid_gene,
    validation_steps=50)

model.save("project_cnn.h5")

pd.DataFrame(history.history).plot(figsize=(8,5))
plt.grid(True)
plt.gca().set_ylim(0,1)
plt.show()

#testing new images of cats
#change and improvise the function
from tensorflow.keras.preprocessing import image
def predict_image(imagepath, model):
    predict = image.load_img(imagepath, target_size = (150, 150))   
    predict_modified = image.img_to_array(predict)
    predict_modified = predict_modified / 255
    predict_modified = np.expand_dims(predict_modified, axis = 0)
    result = model.predict(predict_modified)
    if result[0][0] >= 0.5:
        prediction = 'dog'
        probability = result[0][0]
        print ("probability = " + str(probability))
        print("Prediction = " + prediction)
    else:
        prediction = 'cat'
        probability = 1 - result[0][0]
        print ("probability = " + str(probability))
        print("Prediction = " + prediction)

imagepath=os.path.join('/','content','drive','MyDrive','CNN_CATS','testdog.jpg')
predict_image(imagepath,model)